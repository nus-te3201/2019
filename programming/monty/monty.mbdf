The project below explains how to build a simple chat bot called Monty, adding functionality in small incremental steps.

{{ hr_double }}

<div id="monty1">

### Monty 1

Write a Python program to read in one user command and repeat it back to the user. An example output is given below.

```
>>> Hello, my name is Monty
>>> What can I do for you?
foo
>>> Your command is: foo
>>> Bye!
```

<panel type="seamless" header="Partial solution">

```python
print('>>> Hello, my name is Monty')
# ADD MORE CODE HERE
```
</panel>
</div>
{{ hr_double }}
<div id="monty2">

### Monty 2

Extend [Monty 1 code]({{ baseUrl }}/programming/toc/monty.html#monty-1) to work as follows:

```
>>> Hello, my name is Monty
>>> What can I do for you?

list
>>> Nothing to list
>>> What can I do for you?

foo
>>> OOPS! Unknown command
>>> What can I do for you?

exit
>>> Are you sure? y/n
n
>>> What can I do for you?

exit
>>> Are you sure? y/n
y
>>> Bye!
```

<panel type="seamless" header="Partial solution">

```python
print('>>> Hello, my name is Monty')
while True:
    print('>>> What can I do for you?')
    # ADD MORE CODE HERE
print('>>> Bye!')
```
</panel>

</div>
{{ hr_double }}
<div id="monty3">

### Monty 3

Restructure the [Monty 2 code]({{ baseUrl }}/programming/toc/monty.html#monty-2) to fit the following structure, while keeping the behavior same as Monty 2.

```python
import sys


# ADD MISSING METHODS


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```

<panel type="seamless" header="Partial solution">

```python
import sys

def is_exit_confirmed():
    print('>>> Are you sure? y/n')
    response = input()
    return response == 'y'


def execute_command(command):
    if command == '':
        return
    elif command == 'exit':
        if is_exit_confirmed():
            print('>>> Bye!')
            sys.exit()
    # ...


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```
</panel>

</div>
{{ hr_double }}
<div id="monty4">

### Monty 4

Enhance the [Monty 3 code]({{ baseUrl }}/programming/toc/monty.html#monty-3) to improve the functionality as per the sample output given below.

```
>>> Hello, my name is Monty
>>> What can I do for you?

list
>>> Nothing to list
>>> What can I do for you?

add read book
>>> What can I do for you?

list
>>> List of items:
     1. read book
>>> What can I do for you?

add return book
>>> What can I do for you?

list
>>> List of items:
     1. read book
     2. return book
>>> What can I do for you?

exit
>>> Are you sure? y/n
y
>>> Bye!
```

<box>

:bulb: You can use the list slicing syntax to extract a portion of a  string.<br>

<include src="inputOutput.md" boilerplate>
<span id="input">

```python
s = 'abcdefgh'
print(s[2:])
print(s[:5])
```
</span>
<span id="output">

```
cdefgh
abcde
```

</span>
</include>

The above technique can be used to extract the item description from an `add` command.
</box>


<panel type="seamless" header="Partial solution">

```python
import sys

items = []


def print_items():
    if len(items) == 0:
        print('>>> Nothing to list')
    else:
        for i, item in enumerate(items):
            # ...


def add_item(user_input):
    # ...


def terminate():
    # ...

# ...

def execute_command(command):
    if command == '':
        return
    elif command == 'exit':
        terminate()
    elif command == 'list':
        print_items()
    elif command.startswith('add '):
        add_item(command)
    else:
        print('>>> OOPS! Unknown command')


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```
</panel>

</div>
{{ hr_double }}

%%Remaining increments to be added soon.%%