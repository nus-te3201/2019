The project below explains how to build a simple chat bot called Monty, adding functionality in small incremental steps.

{{ hr_double }}

<div id="monty1">

### Monty 1

Write a Python program to read in one user command and repeat it back to the user. An example output is given below.

```
>>> Hello, my name is Monty
>>> What can I do for you?
foo
>>> Your command is: foo
>>> Bye!
```

<panel header=":fas-battery-quarter: Partial solution" minimized>

```python
print('>>> Hello, my name is Monty')
# ADD MORE CODE HERE
```
</panel>
</div>
{{ hr_double }}
<div id="monty2">

### Monty 2

Extend [Monty 1 code]({{ baseUrl }}/programming/toc/monty.html#monty-1) to work as follows:

```
>>> Hello, my name is Monty
>>> What can I do for you?

list
>>> Nothing to list
>>> What can I do for you?

foo
>>> OOPS! Unknown command
>>> What can I do for you?

exit
>>> Are you sure? y/n
n
>>> What can I do for you?

exit
>>> Are you sure? y/n
y
>>> Bye!
```

<panel header=":fas-battery-quarter: Partial solution" minimized>

```python
print('>>> Hello, my name is Monty')
while True:
    print('>>> What can I do for you?')
    # ADD MORE CODE HERE
print('>>> Bye!')
```
</panel>

</div>
{{ hr_double }}
<div id="monty3">

### Monty 3

Restructure the [Monty 2 code]({{ baseUrl }}/programming/toc/monty.html#monty-2) to fit the following structure, while keeping the behavior same as Monty 2.

```python
import sys


# ADD MISSING METHODS


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```

<panel header=":fas-battery-quarter: Partial solution" minimized>

```python
import sys

def is_exit_confirmed():
    print('>>> Are you sure? y/n')
    response = input()
    return response == 'y'


def execute_command(command):
    if command == '':
        return
    elif command == 'exit':
        if is_exit_confirmed():
            print('>>> Bye!')
            sys.exit()
    # ...


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```
</panel>

</div>
{{ hr_double }}
<div id="monty4">

### Monty 4

Enhance the [Monty 3 code]({{ baseUrl }}/programming/toc/monty.html#monty-3) to improve the functionality as per the sample output given below.

```
>>> Hello, my name is Monty
>>> What can I do for you?

list
>>> Nothing to list
>>> What can I do for you?

add read book
>>> What can I do for you?

list
>>> List of items:
     1. read book
>>> What can I do for you?

add return book
>>> What can I do for you?

list
>>> List of items:
     1. read book
     2. return book
>>> What can I do for you?

exit
>>> Are you sure? y/n
y
>>> Bye!
```

<box>

:bulb: You can use the list slicing syntax to extract a portion of a  string.<br>

<include src="inputOutput.md" boilerplate>
<span id="input">

```python
s = 'abcdefgh'
print(s[2:])
print(s[:5])
```
</span>
<span id="output">

```
cdefgh
abcde
```

</span>
</include>

The above technique can be used to extract the item description from an `add` command.
</box>


<panel header=":fas-battery-quarter: Partial solution" minimized>

```python
import sys

items = []


def print_items():
    if len(items) == 0:
        print('>>> Nothing to list')
    else:
        for i, item in enumerate(items):
            # ...


def add_item(user_input):
    # ...


def terminate():
    # ...

# ...

def execute_command(command):
    if command == '':
        return
    elif command == 'exit':
        terminate()
    elif command == 'list':
        print_items()
    elif command.startswith('add '):
        add_item(command)
    else:
        print('>>> OOPS! Unknown command')


def main():
    print_greeting()
    while True:
        command = read_command()
        execute_command(command)


main()
```
</panel>

</div>
{{ hr_double }}

<div id="monty5">

### Monty 5

Enhance the [Monty 4 code]({{ baseUrl }}/programming/toc/monty.html#monty-4) in the following ways:
* Add a `done` command so that the user can mark a task as done. e.g., `done 2` marks the task at index 2 as 'done'.
* Show appropriate error messages if the user gives an invalid index for the `done` command

A sample output is given below.

```
>>> Hello, my name is Monty
>>> What can I do for you?

add borrow book
>>> What can I do for you?

add read book
>>> What can I do for you?

add return book
>>> What can I do for you?

list
>>> List of items:
     [✗] 1. borrow book
     [✗] 2. read book
     [✗] 3. return book
>>> What can I do for you?

done 1
>>> What can I do for you?

list
>>> List of items:
     [✓] 1. borrow book
     [✗] 2. read book
     [✗] 3. return book
>>> What can I do for you?

done abc
>>> SORRY, I could not perform that command. Problem: abc is not a number
>>> What can I do for you?

done 5
>>> SORRY, I could not perform that command. Problem: No item at index 5
>>> What can I do for you?

done 0
>>> SORRY, I could not perform that command. Problem: Index must be greater than 0
>>> What can I do for you?

garbage
>>> SORRY, I could not perform that command. Problem: Command not recognized
>>> What can I do for you?

exit
>>> Are you sure? y/n
y
>>> Bye!
```

<box>

:bulb: Each task has two data values: the description and the 'done' status. You can use a list to hold these two data items. That means your list of tasks will be a list containing lists. Example:
```python
tasks = []
tasks.append(['read book', False])
print('Description of the first task:', tasks[0][0])

if tasks[0][1]:
    print('✓')
else:
    print('✗')
```

:bulb: You can use exceptions to identify and handle errors in the command.
```python
def main():
    print_greeting()
    while True:
        try:
            command = read_command()
            execute_command(command)
        except Exception as e:
            print('>>> SORRY, I could not perform that command. Problem:', e)
```
</box>


<panel header=":fas-battery-quarter: Partial solution" minimized>

```python

items = []

# ...

def get_item_for_index(index_as_string):
    try:
        index = int(index_as_string.strip())
    except Exception:
        raise ValueError(index_as_string + ' is not a number ')

    if index < 1:
        raise ValueError('Index must be greater than 0 ')

    try:
        return items[index - 1]
    except IndexError:
        raise ValueError('No item at index ' + index_as_string)


def mark_item_as_done(user_input):
    index_as_string = user_input[5:]
    get_item_for_index(index_as_string)[1] = True


def execute_command(command):
    if command == '':
        return
    elif command == 'exit':
        terminate()
    elif command == 'list':
        print_items()
    elif command.startswith('add '):
        add_item(command)
    elif command.startswith('done '):
        mark_item_as_done(command)
    else:
        raise Exception('Command not recognized')


def main():
    print_greeting()
    while True:
        try:
            command = read_command()
            execute_command(command)
        except Exception as e:
            print('>>> SORRY, I could not perform that command. Problem:', e)


main()
```
</panel>

</div>
{{ hr_double }}

<div id="monty6">

### Monty 6

Enhance the [Monty 5 code]({{ baseUrl }}/programming/toc/monty.html#monty-5) in the following ways:
* Add a `help` command so that the user can view how to use the app.
* Improve the formatting of the text displayed to the user to make the user experience nicer.

A sample output is given below.

```
*******************************************************************************************
*  __          __  _                            _          __  __             _           *
*  \ \        / / | |                          | |        |  \/  |           | |          *
*   \ \  /\  / /__| | ___ ___  _ __ ___   ___  | |_ ___   | \  / | ___  _ __ | |_ _   _   *
*    \ \/  \/ / _ \ |/ __/ _ \| '_ ' _ \ / _ \ | __/ _ \  | |\/| |/ _ \| '_ \| __| | | |  *
*     \  /\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | |  | | (_) | | | | |_| |_| |  *
*      \/  \/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  |_|  |_|\___/|_| |_|\__|\__, |  *
*                                                                                  __/ |  *
*                                                                                 |___/   *
******************************************************************************************* 

>>> What can I do for you?

help
>>> I'm glad you asked. Here it is:
==================================================
Monty can understand the following commands:

  add DESCRIPTION 
    Adds a task to the list
    Example: add read book
  done INDEX
    Marks the task at INDEX as 'done'
    Example: done 1
  exit
    Exits the application
  help_info
    Shows the help_info information
  list
    Lists the tasks in the list
-------------------------------------------------- 

>>> What can I do for you?

add read book
>>> Task added to the list
>>> What can I do for you?

add return book
>>> Task added to the list
>>> What can I do for you?

done 1
>>> Congrats on completing a task! :-)
>>> What can I do for you?

list
>>> Here is the list of tasks:
==================================================
STATUS | INDEX | DESCRIPTION                
--------------------------------------------------
  ✓    |   1   | read book                  
  ✗    |   2   | return book                
--------------------------------------------------
>>> What can I do for you?
```

<box>

:bulb: You can use triple quotes to define a long string such as the help text.
```python
help_text ='''
long text
more text
'''
```

:bulb: You can generate ASCII art using online resources such as http://patorjk.com/software/taag
</box>


<panel header=":fas-battery-quarter: Partial solution" minimized>

```python
def print_greeting():
    banner = '''
*******************************************************************************************
*  __          __  _                            _          __  __             _           *
*  \ \        / / | |                          | |        |  \/  |           | |          *
*   \ \  /\  / /__| | ___ ___  _ __ ___   ___  | |_ ___   | \  / | ___  _ __ | |_ _   _   *
*    \ \/  \/ / _ \ |/ __/ _ \| '_ ' _ \ / _ \ | __/ _ \  | |\/| |/ _ \| '_ \| __| | | |  *
*     \  /\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | |  | | (_) | | | | |_| |_| |  *
*      \/  \/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  |_|  |_|\___/|_| |_|\__|\__, |  *
*                                                                                  __/ |  *
*                                                                                 |___/   *
*******************************************************************************************
'''
    print(banner.strip(), '\n')
```
</panel>

</div>
{{ hr_double }}
<div id="monty7">

### Monty 7

Enhance the [Monty 6 code]({{ baseUrl }}/programming/toc/monty.html#monty-6) in the following ways:
* Monty **saves tasks into a csv file**.
* **Add a `delete` command** that can delete a task at a specific index.

A sample output is given below. Note the following:
* Monty is able to show at the very start the three tasks loaded from the file.
* When item 2 is deleted, the item previously at index 3 moves to position 2.

```
*******************************************************************************************
*  __          __  _                            _          __  __             _           *
*  \ \        / / | |                          | |        |  \/  |           | |          *
*   \ \  /\  / /__| | ___ ___  _ __ ___   ___  | |_ ___   | \  / | ___  _ __ | |_ _   _   *
*    \ \/  \/ / _ \ |/ __/ _ \| '_ ' _ \ / _ \ | __/ _ \  | |\/| |/ _ \| '_ \| __| | | |  *
*     \  /\  /  __/ | (_| (_) | | | | | |  __/ | || (_) | | |  | | (_) | | | | |_| |_| |  *
*      \/  \/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/  |_|  |_|\___/|_| |_|\__|\__, |  *
*                                                                                  __/ |  *
*                                                                                 |___/   *
******************************************************************************************* 

>>> What can I do for you?

list
>>> Here is the list of tasks:
==================================================
STATUS | INDEX | DESCRIPTION                
--------------------------------------------------
  ✓    |   1   | borrow book                
  ✗    |   2   | read book                  
  ✗    |   3   | return book                
--------------------------------------------------
>>> What can I do for you?

delete 2
>>> Task deleted from the list
>>> What can I do for you?

list
>>> Here is the list of tasks:
==================================================
STATUS | INDEX | DESCRIPTION                
--------------------------------------------------
  ✓    |   1   | borrow book                
  ✗    |   2   | return book                  
--------------------------------------------------
```

<box>

:bulb: here are some tips:

* The filename can be specified in the code. e.g.,
  ```python
  DATA_FILE = 'monty7.csv'
  ```
* The format of the file is up to you. Here is an example:
  ```
  borrow book,done
  read book,pending
  return book,pending
  ```
* The program can load the tasks from the file at the beginning. It can save the data after each command. For example, as follows:
  ```python
   items = []
   DATA_FILE = 'monty7.csv'
   
   
   def main():
       load_data(DATA_FILE) # load task data from the file
       print_greeting()
       while True:
           try:
               command = read_command()
               execute_command(command)
               save_data(DATA_FILE, items) # save all tasks in the file
           except Exception as e:
               print('>>> SORRY, I could not perform that command. Problem:', e)
   
   
   main()
  ```
</box>

<panel header=":fas-battery-quarter: Partial solution" minimized>

Here is the code for loading data from the file.
```python
def load_data(filename):
    data_file = open(filename)
    deliveries_reader = csv.reader(data_file)
    for row in deliveries_reader:
        if not row:
            continue
        add_item_from_csv_line(row)
    data_file.close()


def add_item_from_csv_line(values):
    status = True if values[1] == 'done' else False
    items.append([values[0], status])  # items is a global variable
```

Note that `status = True if values[1] == 'done' else False`{.python} is a shortcut syntax. It is equivalent to the code below:
```
if values[1] == 'done':
    status = True
else:
    status = False
```
</panel>
<p/>

Given below are some more features you can consider adding at this point (it is ==optional to add them to Monty 7==):
* **Remove the the need for the user to confirm before exiting Monty.** As data are saved to a file, such a confirmation is no longer necessary because an accidental exit will not cause any permanent damage.
  ```
  >>> What can I do for you?
  
  exit
  >>> Bye!
  ```
* **Add a `pending` command** that can mark a task as pending (i.e., the opposite of the `done` command).
  ```
   >>> What can I do for you?
   
   list
   >>> Here is the list of tasks:
   ==================================================
   STATUS | INDEX | DESCRIPTION                
   --------------------------------------------------
     ✓    |   1   | borrow book                
     ✗    |   2   | read book                  
     ✗    |   3   | return book                
   --------------------------------------------------
   >>> What can I do for you?
   
   pending 1
   >>> OK, I have marked that item as pending
   >>> What can I do for you?
   
   list
   >>> Here is the list of tasks:
   ==================================================
   STATUS | INDEX | DESCRIPTION                
   --------------------------------------------------
     ✗    |   1   | borrow book                
     ✗    |   2   | read book                  
     ✗    |   3   | return book                
   --------------------------------------------------
   >>> What can I do for you?
  ```
* **Make commands case insensitive and immune to extra leading/trailing spaces**. For example, all these commands should work the same way.
  ```
  add read book
  ADD read book
  Add read book
  add    read book
      add read book
  ```

</div>

{{ hr_double }}

%%Remaining increments to be added soon.%%